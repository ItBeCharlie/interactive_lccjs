```
; This program cycles printing a single character from 'a' to 'f' in the terminal
     .lccplus
      mov r0, 0
      cursor r0 ; toggles the cursor off
      clear ; clears the screen of anything else that was in the terminal
      ld r1, onesecond ; load 1000 into r1 to represent milliseconds
      mov r0, 'a' ; our initialized 'current char' to print goes into r0
      mov r2, 'f' ; this is our 'terminal char'
loop: cmp r0, r2 ; check to see how the current compares with the terminal
      brgt done ; if the current is greater than the terminal, branch to done label
      clear ; else, we enter the loop, and clear the last printed char
      aout r0 ; print the current char
      sleep r1 ; pause for 1 second
      add r0, r0, 1 ; increment the char
      br loop ; go back to the loop label
done: clear ; clear the screen after the loop is done
      halt ; end the program

onesecond: .word 1000
```

```
; This program prints out the letters 'a' through 'f' in the terminal 'typewriter' style
     .lccplus
      clear ; clears the screen of anything else that was in the terminal
      ld r1, onesecond ; load 1000 into r1 to represent milliseconds
      mov r0, 'a' ; our initialized 'current char' to print goes into r0
      mov r2, 'f' ; this is our 'terminal char'
loop: cmp r0, r2 ; check to see how the current compares with the terminal
      brgt done ; if the current is greater than the terminal, branch to done label
      aout r0 ; print the current char
      sleep r1 ; pause for 1 second
      add r0, r0, 1 ; increment the char
      br loop ; go back to the loop label
done: nl
      halt ; end the program

onesecond: .word 1000
```

```
; This program prompts the user to press any key, and prints out the key pressed
; until the user presses the Enter key, at which point the program ends
      .lccplus
      lea r0, pressKey
      sout r0
      nl
      mov r1, '\n'
loop: nbain r0 ; poll for input
      cmp r0, 0
      brz loop ; keep polling as long as input is empty
      cmp r0, r1 ; check for enter key
      bre done ; if enter key pressed, we break the loop
      lea r2, youPressed ; else, another char key was pressed
      sout r2
      aout r0
      nl
      mov r0, 0
      br loop
done: lea r0, goodbye
      sout r0
      nl
      halt

pressKey: .string "Press any key, Enter to quit: "
youPressed: .string "You pressed "
goodbye: .string "Goodbye!"
```

```
; This program generates 20 random numbers between 1 and 20, and 
; the numbers are deterministic (same each time the program is run)
        .lccplus
        lea r0, twentyRandNums
        sout r0
        nl
        mov r0, 0
        srand r0 ; seed the random number generator with 0
        mov r2, 20 ; how many numbers to make
        mov r3, 0 ; counter
loop:   cmp r3, r2
        bre done
        mov r0, 1 ; min
        mov r1, 20 ; max

        ; saves a random number between 1 and 100 into r0
        ; and updates the seed
        rand r0, r1

        dout r0 ; prints the random number
        nl
        add r3, r3, 1
        br loop
done:   halt

twentyRandNums: .string "Here are 20 random numbers (1-20, deterministic):"
```

```
; This program generates 20 random numbers between 1 and 20, and 
; the numbers are non-deterministic (different each time the 
; program is run)
        .lccplus
        lea r0, twentyRandNums
        sout r0
        nl
        millis r0 ; store the current time milliseconds in r0
        srand r0 ; seed the random number generator with the time
        mov r2, 20 ; how many numbers to make
        mov r3, 0 ; counter
loop:   cmp r3, r2
        bre done
        mov r0, 1 ; min
        mov r1, 20 ; max

        ; saves a random number between 1 and 100 into r0
        ; and updates the seed
        rand r0, r1

        dout r0 ; prints the random number
        nl
        add r3, r3, 1
        br loop
done:   halt

twentyRandNums: .string "Here are 20 random numbers (1-20, non-deterministic):"
```

```
; A program that has a player that can move left 
; and right along a 1D board row
; Note: This program uses a couple of techniques to improve
; render performance. (1) It only refreshes/prints the board
; when the player moves. (2) Instead of clearing the entire
; screen, it only resets the cursor position to the top left
; corner of the screen. This is done by calling the resetc
; "reset cursor" instruction
        .lccplus
        .start startup

startup: 
        clear
        mov r0, 0
        cursor r0 ; turn off cursor
        bl main
        halt 

moveRight:
        ld r1, xypos + 0
        add r1, r1, 1
        mov r0, 10
        rem r1, r0
        st r1, xypos + 0
        ret

moveLeft:
        ld r1, xypos + 0
        sub r1, r1, 1
        add r1, r1, 10
        mov r0, 10
        rem r1, r0
        st r1, xypos + 0
        ret

main:   push lr
        push fp
        mov fp, sp

        ; print the instructions and board
        lea r2, pressKey
        sout  r2
        nl
        bl printBoard

    @mainLoopStart:
        nbain r0 ; get user input
        mov r1, 'd'
        cmp r0, r1
        brne @notD
        bl moveRight
        br @keyPressed
    @notD:
        mov r1, 'a'
        cmp r0, r1
        brne @notA
        bl moveLeft
        br @keyPressed
    @notA:
        mov r1, 'q'
        cmp r0, r1
        bre @mainLoopDone
    @keyPressed:
        ; if a letter was pressed, we can update the board
        cmp r0, 0
        bre @postPrint
        ; reprint the instructions and board
        ; clear ; Note: this can cause flickering
        resetc ; resetc is better here than clear because the board dimensions are static
        lea r2, pressKey
        sout  r2
        nl
        ; printing should happen instantaneously
        bl printBoard
        mov r0, 0 ; clear ascii input buffer
    @postPrint:

        mov r2, 32 ; delay in milliseconds between prints
        sleep r2
        br @mainLoopStart

    @mainLoopDone:
        mov sp, fp
        pop fp
        pop lr
        ret

; for each column in row, if the player is there, print the player
; otherwise print a blank space
printBoard:
        push    lr
        push    fp
        mov     fp, sp

        sub    sp, sp, 3 ; row counter = fp - 1, col counter = fp - 2, player x = fp - 3
        ld     r2, xypos + 0 ; x position of the player
        str    r2, fp, -3

        ; let's now print out each column in row 1
        mov    r3, 0 ; col counter
  @L0:  cmp    r3, 10
        bre    @L1
        ldr    r2, fp, -3 ; x position of the player
        cmp    r3, r2
        brne   @L2
        ; print player char
        ld     r2, player
        aout   r2
        br     @L3 
  @L2:  ; print blank char
        ld     r2, blank
        aout   r2
  @L3:  ; print space between chars
        ld     r2, space
        aout   r2
        ; increment col counter
        add    r3, r3, 1
        br     @L0
  @L1:  ; done printing the row
        nl

        mov     sp, fp
        pop     fp
        pop     lr
        ret

space:  .word ' '
blank:  .word '.'
player:  .word '#'
cols:   .word 10
xypos:  .word 0 ; x position of the player
pressKey: .string "Press 'a' or 'd' to move the player, 'q' to quit: "
```

```
; a non-blocking input example of a character moving
; around a board using wasd, q to quit
      .lccplus
      .start startup

;---------------------------------------------------------
; Data / Globals
;---------------------------------------------------------
pressKey: .string "Press W/A/S/D to move, Q to quit:"
space:    .word ' '
blank:    .word '.'
player:   .word '#'
rows:     .word 10
cols:     .word 10

; Player X and Y positions (starting at 0,0).
xypos:    .word 0  ; x
          .word 0  ; y

;---------------------------------------------------------
; Startup: Turn off cursor, call main, then HALT
;---------------------------------------------------------
startup:
      clear           ; optional: clear once at the beginning
      mov   r0, 0
      cursor r0       ; turn off cursor
      bl    main
      halt

;---------------------------------------------------------
; Move Right (x ← x+1 mod 10)
;---------------------------------------------------------
moveRight:
      ld    r1, xypos + 0  ; r1 = x
      add   r1, r1, 1
      mov   r0, 10
      rem   r1, r0
      st    r1, xypos + 0
      ret

;---------------------------------------------------------
; Move Left (x ← x−1 mod 10)
;---------------------------------------------------------
moveLeft:
      ld    r1, xypos + 0  ; r1 = x
      sub   r1, r1, 1
      add   r1, r1, 10     ; ensure positive
      mov   r0, 10
      rem   r1, r0
      st    r1, xypos + 0
      ret

;---------------------------------------------------------
; Move Up (y ← y−1 mod 10)
;---------------------------------------------------------
moveUp:
      ld    r1, xypos + 1  ; r1 = y
      sub   r1, r1, 1
      add   r1, r1, 10     ; ensure positive
      mov   r0, 10
      rem   r1, r0
      st    r1, xypos + 1
      ret

;---------------------------------------------------------
; Move Down (y ← y+1 mod 10)
;---------------------------------------------------------
moveDown:
      ld    r1, xypos + 1  ; r1 = y
      add   r1, r1, 1
      mov   r0, 10
      rem   r1, r0
      st    r1, xypos + 1
      ret

;---------------------------------------------------------
; Print the 10x10 Board at top-left
;   If (row == y && col == x), print '#' else '.'
;---------------------------------------------------------
printBoard:
      push  lr
      push  fp
      mov   fp, sp

      ; We'll use r0, r1, r2, r3 internally

      ; Load x,y into r2,r3
      ld    r2, xypos + 0  ; r2 = x
      ld    r3, xypos + 1  ; r3 = y

      mov   r0, 0          ; row = 0
@outerLoop:
      cmp   r0, 10
      bre   @doneOuter
        mov r1, 0          ; col = 0
  @innerLoop:
        cmp r1, 10
        bre @doneInner
          ; compare (r0 == y) && (r1 == x)
          cmp r0, r3
          brne @notThisRow
            cmp r1, r2
            brne @notThisCol
            ; print the player char
            ld   r4, player
            aout r4
            br   @postPrint
  @notThisRow:
  @notThisCol:
          ; print a blank
          ld   r4, blank
          aout r4
  @postPrint:
          ; print a space after each cell
          ld   r4, space
          aout r4

          add  r1, r1, 1   ; col++
          br   @innerLoop
  @doneInner:
      nl                  ; end of row
      add  r0, r0, 1      ; row++
      br   @outerLoop
@doneOuter:

      mov   sp, fp
      pop   fp
      pop   lr
      ret

;---------------------------------------------------------
; Main Loop
; - Use nbain r4 for input
; - If r4 != 0, interpret as a key
; - 'w','a','s','d' => move up/left/down/right
; - 'q' => quit
; - Then reset cursor to top-left, re-print
; - Sleep some ms (16 or 32, etc.)
;---------------------------------------------------------
main:
      push  lr
      push  fp
      mov   fp, sp

@loopStart:
      ; 1) read input non-blocking
      nbain r4
      cmp   r4, 0
      bre   @skipMovement   ; if no key pressed, skip

      ; 2) decode key
      mov   r1, 'q'
      cmp   r4, r1
      bre   @quit

      mov   r1, 'w'
      cmp   r4, r1
      brne  @checkS
        bl  moveUp
        br  @doneMovement
  @checkS:
      mov   r1, 's'
      cmp   r4, r1
      brne  @checkA
        bl  moveDown
        br  @doneMovement
  @checkA:
      mov   r1, 'a'
      cmp   r4, r1
      brne  @checkD
        bl  moveLeft
        br  @doneMovement
  @checkD:
      mov   r1, 'd'
      cmp   r4, r1
      brne  @doneMovement
        bl  moveRight
        br  @doneMovement

  @doneMovement:
        ; fall through to skipMovement

@skipMovement:
      ; 3) Re-render the board
      resetc            ; move cursor to top-left
      lea   r0, pressKey
      sout  r0
      nl
      bl    printBoard

      ; 4) small delay
      mov   r2, 32      ; 32 ms
      sleep r2

      ; 5) loop back
      br    @loopStart

@quit:
      ; Return from main => end program
      mov   sp, fp
      pop   fp
      pop   lr
      ret
```

```
; "find the fruit" a precursor to snake
; the player can move around the board using wasd
; the player can eat the fruit, which gets randomly
; placed on the board, and placed again each time
; the player eats it
      .lccplus
      .start startup

;---------------------------------------------------------
; Startup: Turn off cursor, call main, then HALT
;---------------------------------------------------------
startup:
      clear           ; optional: clear once at the beginning
      mov   r0, 0
      cursor r0       ; turn off cursor
      bl    main
      halt

;---------------------------------------------------------
; Data / Globals
;---------------------------------------------------------
pressKey: .string "Press W/A/S/D to move, Q to quit:"
space:    .word ' '
blank:    .word '.'
player:   .word '#'
fruitSym: .word 'f'
rows:     .word 10
cols:     .word 10

; Player X,Y positions
xypos:    .word 0  ; x
          .word 0  ; y

; Fruit X,Y positions
fruitxy:  .word 0  ; fruitX
          .word 0  ; fruitY

;---------------------------------------------------------
; Subroutine: placeFruit
;  - Uses rand to pick random x,y in [0..9]
;  - Stores in fruitxy + 0,1
;---------------------------------------------------------
placeFruit:
      push  lr
      push  fp
      mov   fp, sp

      ; pick random x in [0..9]
      mov   r0, 0
      mov   r1, 9
      rand  r0, r1  ; => r0 in [0..9]
      st    r0, fruitxy + 0

      ; pick random y in [0..9]
      mov   r0, 0
      mov   r1, 9
      rand  r0, r1  ; => r0 in [0..9]
      st    r0, fruitxy + 1

      mov   sp, fp
      pop   fp
      pop   lr
      ret

;---------------------------------------------------------
; Move Right (x ← x+1 mod 10)
;---------------------------------------------------------
moveRight:
      ld    r1, xypos + 0  ; r1 = x
      add   r1, r1, 1
      mov   r0, 10
      rem   r1, r0
      st    r1, xypos + 0
      ret

;---------------------------------------------------------
; Move Left (x ← x−1 mod 10)
;---------------------------------------------------------
moveLeft:
      ld    r1, xypos + 0  ; r1 = x
      sub   r1, r1, 1
      add   r1, r1, 10     ; ensure positive
      mov   r0, 10
      rem   r1, r0
      st    r1, xypos + 0
      ret

;---------------------------------------------------------
; Move Up (y ← y−1 mod 10)
;---------------------------------------------------------
moveUp:
      ld    r1, xypos + 1  ; r1 = y
      sub   r1, r1, 1
      add   r1, r1, 10     ; ensure positive
      mov   r0, 10
      rem   r1, r0
      st    r1, xypos + 1
      ret

;---------------------------------------------------------
; Move Down (y ← y+1 mod 10)
;---------------------------------------------------------
moveDown:
      ld    r1, xypos + 1  ; r1 = y
      add   r1, r1, 1
      mov   r0, 10
      rem   r1, r0
      st    r1, xypos + 1
      ret

;---------------------------------------------------------
; Subroutine: printBoard
;  - Prints a 10x10 board
;    '#' for player, 'f' for fruit, '.' for empty
;---------------------------------------------------------
printBoard:
      push  lr
      push  fp
      mov   fp, sp

      ; We'll use r0..r3, r4 is reserved for nbain

@printBoardStart:
      mov   r3, 0  ; row = 0
@outer2:
      cmp   r3, 10
      bre   @doneOuter2
        mov r2, 0  ; col = 0
  @inner2:
        cmp r2, 10
        bre @doneInner2
          ; If (r3,r2) == (playerY,playerX) => print player
          ; cmp r3, xypos + 1  ; can't do that. Actually we need to do a two-step:
          ; Instead, let's do:
          ld r0, xypos + 1   ; r0 = playerY
          cmp r3, r0
          brne @checkFruit
            ld r1, xypos + 0 ; r1 = playerX
            cmp r2, r1
            brne @checkFruit
            ; print player
            ld r1, player
            aout r1
            br @postCell
  @checkFruit:
          ; If (r3,r2) == (fruitY,fruitX) => print 'f'
          ld r0, fruitxy + 1 ; fruitY
          cmp r3, r0
          brne @notThisFruitRow
            ld r1, fruitxy + 0 ; fruitX
            cmp r2, r1
            brne @notThisFruitCol
            ; print fruit
            ld r1, fruitSym
            aout r1
            br @postCell
  @notThisFruitRow:
  @notThisFruitCol:
          ; print '.'
          ld r1, blank
          aout r1
  @postCell:
          ; print space
          ld r1, space
          aout r1

          add r2, r2, 1  ; col++
          br @inner2
  @doneInner2:
      nl
      add r3, r3, 1  ; row++
      br @outer2
@doneOuter2:

      mov   sp, fp
      pop   fp
      pop   lr
      ret

;---------------------------------------------------------
; main: 
; 1) seed with current millis
; 2) placeFruit once
; 3) loop reading nbain r4
; 4) wasd => move, check collision => re-placeFruit if collided
; 5) resetc, print, sleep
; 6) 'q' => end
;---------------------------------------------------------
main:
      push  lr
      push  fp
      mov   fp, sp

      ; Use the current time as random seed
      millis r0
      srand r0

      ; place fruit initially
      bl placeFruit

@loopStart:
      nbain r4
      cmp   r4, 0
      bre   @skipMovement  ; no key pressed

      ; check for 'q'
      mov   r1, 'q'
      cmp   r4, r1
      bre   @quit

      ; check 'w'
      mov   r1, 'w'
      cmp   r4, r1
      brne  @checkS
        bl  moveUp
        br  @movementDone
  @checkS:
      mov   r1, 's'
      cmp   r4, r1
      brne  @checkA
        bl  moveDown
        br  @movementDone
  @checkA:
      mov   r1, 'a'
      cmp   r4, r1
      brne  @checkD
        bl  moveLeft
        br  @movementDone
  @checkD:
      mov   r1, 'd'
      cmp   r4, r1
      brne  @movementDone
        bl  moveRight
        br  @movementDone

@movementDone:
      ; after moving the player, check collision with fruit
      ; load player (x,y) => r0,r1
      ld r0, xypos + 0
      ld r1, xypos + 1

      ; load fruit (fx,fy) => r2,r3
      ld r2, fruitxy + 0
      ld r3, fruitxy + 1

      cmp r0, r2
      brne @skipMovement
      cmp r1, r3
      brne @skipMovement
      ; we collided => place the fruit anew
      bl placeFruit

@skipMovement:
      resetc
      lea r0, pressKey
      sout r0
      nl
      bl printBoard

      mov r2, 32  ; ~30 FPS
      sleep r2

      br @loopStart

@quit:
      mov sp, fp
      pop fp
      pop lr
      ret
```

```
; WIP snake game writtein lcc+js assembly
; TODO: implement snake body growing
; TODO: implement rendering of snake body
; TODO: implement snake collision with self
      .lccplus
      .start startup

;-------------------------------------------
; Startup: Clear screen, hide cursor, call main
;-------------------------------------------
startup:
      clear
      mov   r0, 0
      cursor r0   ; hide cursor
      bl    main
      halt

;---------------------------------------------------------
; placeFruit: pick random x,y in [0..9] for the fruit
;---------------------------------------------------------
placeFruit:
      push  lr
      push  fp
      mov   fp, sp

      ; random X in [0..9]
      mov   r0, 0
      mov   r1, 9
      rand  r0, r1    ; r0 => [0..9]
      st    r0, fruitxy+0

      ; random Y in [0..9]
      mov   r0, 0
      mov   r1, 9
      rand  r0, r1
      st    r0, fruitxy+1

      mov   sp, fp
      pop   fp
      pop   lr
      ret

;---------------------------------------------------------
; moveSnake: shift snake body and move head in dir
;   dir=0 => up, 1=>right, 2=>down, 3=>left
;---------------------------------------------------------
moveSnake:
      push  lr
      push  fp
      mov   fp, sp

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;   lea r0, currentHeadIs
    ;   sout r0
    ;   ld  r0, snakeBuf+0   ; headX
    ;   dout r0
    ;   lea r0, comma
    ;   sout r0
    ;   ld  r0, snakeBuf+1   ; headY
    ;   dout r0
    ;   nl
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

      ; use r0..r3, keep r4 for nbain
      ; 1) read snakeLen into r0
      ld    r0, snakeLen
      cmp   r0, 1
      bre   @skipShift  ; if length=1, no tail to shift

      ; i from snakeLen-1 down to 1
@shiftLoop:
      ; i--
      ; We'll store i in r3 and loop. Start i = (snakeLen-1).
      ; We'll do a small custom approach:

      ; r1 = snakeLen
      ld   r1, snakeLen
      sub  r1, r1, 1     ; i = snakeLen-1
@loop2:
      cmp  r1, 0
      bre  @doneShift

      ; copy old = snakeBuf[2*(i-1)], new = snakeBuf[2*i]
      ; "2*i" => i<<1
      mov  r2, r1
      sll  r2, 1     ; r2 = 2*i
      mov  r3, r1
      sub  r3, r3, 1
      sll  r3, 1     ; r3 = 2*(i-1)

      ; snakeBuf[r2]   = snakeBuf[r3]
      push r2 ; save r2
      push r3 ; save r3
      lea r2, snakeBuf
      add r2, r2, r3
      ldr r0, r2, 0 ; oldX
      pop r3 ; restore r3
      pop r2 ; restore r2

      push r3 ; save r3
      push r2 ; save r2
      lea r3, snakeBuf
      add r3, r3, r2
      str r0, r3, 0
      pop r2 ; restore r2
      pop r3 ; restore r3

    ;   ld   r0, snakeBuf+r3  ; oldX
    ;   st   r0, snakeBuf+r2

      add  r3, r3, 1
      add  r2, r2, 1
    ;   ld   r0, snakeBuf+r3  ; oldY
    ;   st   r0, snakeBuf+r2

      push r2 ; save r2
      push r3 ; save r3
      lea r2, snakeBuf
      add r2, r2, r3
      ldr r0, r2, 0 ; oldY
      pop r3 ; restore r3
      pop r2 ; restore r2

      push r3 ; save r3
      push r2 ; save r2
      lea r3, snakeBuf
      add r3, r3, r2
      str r0, r3, 0
      pop r2 ; restore r2
      pop r3 ; restore r3

      sub  r1, r1, 1
      br   @loop2

@doneShift:
@skipShift:

      ; 2) read current head => snakeBuf[0], snakeBuf[1]
      ld  r0, snakeBuf+0   ; headX
      ld  r1, snakeBuf+1   ; headY

      ; 3) move depending on dir
      ld  r2, dir
      cmp r2, 0
      brne @notUp
        ; up => y--
        sub r1, r1, 1
        add r1, r1, 10
        mov r3, 10
        rem r1, r3
        br @doneDir
@notUp:
      cmp r2, 1
      brne @notRight
        ; right => x++
        add r0, r0, 1
        mov r3, 10
        rem r0, r3
        br @doneDir
@notRight:
      cmp r2, 2
      brne @notDown
        ; down => y++
        add r1, r1, 1
        mov r3, 10
        rem r1, r3
        br @doneDir
@notDown:
      ; else => left
      sub r0, r0, 1
      add r0, r0, 10
      mov r3, 10
      rem r0, r3
@doneDir:

      ; store new head
      st r0, snakeBuf+0
      st r1, snakeBuf+1

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;   lea r0, nextHeadIs
    ;   sout r0
    ;   ld  r0, snakeBuf+0   ; headX
    ;   dout r0
    ;   lea r0, comma
    ;   sout r0
    ;   ld  r0, snakeBuf+1   ; headY
    ;   dout r0
    ;   nl
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

      mov sp, fp
      pop fp
      pop lr
      ret

;-------------------------------------------
; Global Data
;-------------------------------------------
pressKey:     .string "Press W/A/S/D to steer, Q to quit. Score: "
currentHeadIs: .string "Current head is at: "
nextHeadIs:    .string "Next head is at: "
comma:         .string ", "
space:        .word ' '
blank:        .word '.'
player:       .word '#'
fruitSym:     .word 'f'
rows:         .word 10
cols:         .word 10

; snake can have up to 20 segments => (x,y) pairs => 40 words
snakeBuf:     .zero 40   ; [0..1]=head, [2..3]=2nd seg, ...
snakeLen:     .word 1    ; length in segments (start=1)
dir:          .word 0    ; direction (0=up,1=right,2=down,3=left)
score:        .word 0

; fruit X,Y
fruitxy:      .word 0
              .word 0

;---------------------------------------------------------
; growSnake: adds one segment to the snake
;   Just increments snakeLen by 1, up to 20
;---------------------------------------------------------
growSnake:
      push lr
      push fp
      mov  fp, sp

      ld   r0, snakeLen
      mov  r1, 20
      cmp  r0, r1   ; max 20
      bre  @skip
      add  r0, r0, 1
      st   r0, snakeLen
@skip:
      ; also increment score
      ld   r1, score
      add  r1, r1, 1
      st   r1, score

      mov sp, fp
      pop fp
      pop lr
      ret

;---------------------------------------------------------
; printBoard: 10x10 board, snake, fruit
; We'll do a naive approach:
;   for row in [0..9]:
;     for col in [0..9]:
;       if (row,col) == fruit => 'f'
;       else if (row,col) in snake => '#'
;       else => '.'
; Then a space, then next col, then NL at row end
; Also print "Press W/A/S/D..., Score: X" at top
;---------------------------------------------------------
printBoard:
      push  lr
      push  fp
      mov   fp, sp

      ; 1) Print prompt + score
      lea   r0, pressKey   ; "Press W/A/S/D to steer, Q to quit. Score: "
      sout  r0
      ld    r1, score
      dout  r1
      nl

      ; 2) Loop over rows = [0..9], cols = [0..9]
      mov   r3, 0        ; r3 = row index
@outerLoop:
      cmp   r3, 10
      bre   @doneRows
        mov r2, 0        ; r2 = col index
@innerLoop:
        cmp r2, 10
        bre @doneCols

        ; A) Check if (row,col) == snake head
        ld  r0, snakeBuf+1  ; r0 = headY
        cmp r3, r0
        brne @checkFruit
          ld r1, snakeBuf+0 ; r1 = headX
          cmp r2, r1
          brne @checkFruit
          ; => This cell is the snake head
          ld  r1, player    ; '#'
          aout r1
          br  @postCell

@checkFruit:
        ; B) If not head, check if (row,col) == fruit
        ld  r0, fruitxy+1   ; fruitY
        cmp r3, r0
        brne @notFruitRow
          ld r1, fruitxy+0  ; fruitX
          cmp r2, r1
          brne @notFruitCol
          ; => This cell is fruit
          ld  r1, fruitSym  ; 'f'
          aout r1
          br  @postCell
@notFruitRow:
@notFruitCol:
        ; C) Otherwise print '.'
        ld  r1, blank       ; '.'
        aout r1

@postCell:
        ; D) Print a space after each cell
        ld  r1, space
        aout r1

        ; E) Next column
        add r2, r2, 1
        br  @innerLoop
@doneCols:
      nl           ; end of row
      add r3, r3, 1
      br  @outerLoop
@doneRows:

      ; done rendering
      mov   sp, fp
      pop   fp
      pop   lr
      ret

;---------------------------------------------------------
; main: the main game loop
;---------------------------------------------------------
main:
      push lr
      push fp
      mov  fp, sp

      ; 1) seed random with current time
      millis r0
      srand r0

      ; 2) place the fruit
      bl placeFruit

      ; 3) init snakeLen=1
      mov r0, 1
      st  r0, snakeLen

      ; 4) set snake head to (5,5) for example
      mov r0, 5
      st  r0, snakeBuf+0
      mov r0, 5
      st  r0, snakeBuf+1

      ; 5) pick random dir in [0..3]
      mov r0, 0
      mov r1, 3
      rand r0, r1    ; => [0..3]
      st  r0, dir

@gameLoop:
      ; (A) read input
      nbain r4
      cmp r4, 0
      bre @noKey

      ; if r4=='q', quit
      mov r1, 'q'
      cmp r4, r1
      bre @quit

      ; if r4=='w', dir=0
      mov r1, 'w'
      cmp r4, r1
      brne @checkS
        mov r0, 0
        st  r0, dir
        br @noKey
@checkS:
      mov r1, 's'
      cmp r4, r1
      brne @checkA
        mov r0, 2
        st  r0, dir
        br @noKey
@checkA:
      mov r1, 'a'
      cmp r4, r1
      brne @checkD
        mov r0, 3
        st  r0, dir
        br @noKey
@checkD:
      mov r1, 'd'
      cmp r4, r1
      brne @noKey
        mov r0, 1
        st  r0, dir
        br @noKey

@noKey:
      ; (B) move the snake
      bl moveSnake

      ; (C) check if head == fruit => grow + re-place fruit
      ld r0, snakeBuf+0  ; headX
      ld r1, snakeBuf+1  ; headY
      ld r2, fruitxy+0
      ld r3, fruitxy+1
      cmp r0, r2
      brne @skipFruit
      cmp r1, r3
      brne @skipFruit
      bl growSnake
      bl placeFruit

@skipFruit:
      ; (D) redraw
      resetc ; off for debugging
      ; clear ; off for debugging
      bl printBoard

      ; (E) small sleep
      mov r2, 128
      sleep r2

      br @gameLoop

@quit:
      mov sp, fp
      pop fp
      pop lr
      ret
```